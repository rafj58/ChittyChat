// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtoClient is the client API for Proto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoClient interface {
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (Proto_SendMessageClient, error)
}

type protoClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoClient(cc grpc.ClientConnInterface) ProtoClient {
	return &protoClient{cc}
}

func (c *protoClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (Proto_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Proto_ServiceDesc.Streams[0], "/proto.proto/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &protoSendMessageClient{stream}
	return x, nil
}

type Proto_SendMessageClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type protoSendMessageClient struct {
	grpc.ClientStream
}

func (x *protoSendMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *protoSendMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProtoServer is the server API for Proto service.
// All implementations must embed UnimplementedProtoServer
// for forward compatibility
type ProtoServer interface {
	SendMessage(Proto_SendMessageServer) error
	mustEmbedUnimplementedProtoServer()
}

// UnimplementedProtoServer must be embedded to have forward compatible implementations.
type UnimplementedProtoServer struct {
}

func (UnimplementedProtoServer) SendMessage(Proto_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedProtoServer) mustEmbedUnimplementedProtoServer() {}

// UnsafeProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoServer will
// result in compilation errors.
type UnsafeProtoServer interface {
	mustEmbedUnimplementedProtoServer()
}

func RegisterProtoServer(s grpc.ServiceRegistrar, srv ProtoServer) {
	s.RegisterService(&Proto_ServiceDesc, srv)
}

func _Proto_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProtoServer).SendMessage(&protoSendMessageServer{stream})
}

type Proto_SendMessageServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type protoSendMessageServer struct {
	grpc.ServerStream
}

func (x *protoSendMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *protoSendMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Proto_ServiceDesc is the grpc.ServiceDesc for Proto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Proto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.proto",
	HandlerType: (*ProtoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _Proto_SendMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/proto.proto",
}
